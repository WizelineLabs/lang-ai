generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Para que example router funcione
// Se eliminar√° en el futuro
model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  firstName     String?    @map("first_name")
  lastName      String?    @map("last_name")
  email         String     @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserTest      UserTest[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// An English assessment test.
// Types are either Evaluation (0) or Lesson (1)
// Difficulty can be Easy, Medium or Hard (0, 1, 2).
model Test {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        Int
  difficulty  Int
  user_test   UserTest[]
  questions   Question[]
}

// Question inside a test.
// Type can be 0, 1, 2
model Question {
  id               String           @id @default(cuid())
  text             String
  type             String
  weigh            Decimal          @db.Decimal
  audioKey         String?
  test_id          String
  test             Test             @relation(fields: [test_id], references: [id])
  user_test_answer UserTestAnswer[]
}

// A session made by a user at a specific point in time
// (Same test can be done multiple times by the same user)
model UserTest {
  id               String           @id @default(cuid())
  user_id          String
  test_id          String
  submitted        Boolean
  startDate        DateTime         @default(now())
  submissionDate   DateTime?
  score            Decimal?         @db.Decimal
  feedback         String?
  test             Test             @relation(fields: [test_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "test_id")
  user             User             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_id")
  user_test_answer UserTestAnswer[]
}

// The specific answers of a userTest.
model UserTestAnswer {
  id               String   @id @default(cuid())
  questionId       String   @map("question_id")
  userTestId       String   @map("user_test_id")
  answer           String   @db.VarChar
  date             DateTime @default(now())
  evaluation       Decimal? @db.Decimal
  evaluationReason String?
  feedback         String?
  videoKey         String?
  question         Question @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "question_id")
  user_test        UserTest @relation(fields: [userTestId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_test_id")

  @@unique([questionId, userTestId])
}
